services:
  # PostgreSQL 数据库 (开发环境)
  postgres-dev:
    image: postgres:15-alpine
    container_name: media-hub-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: media_hub_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - media-hub-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis 缓存 (开发环境)
  redis-dev:
    image: redis:7-alpine
    container_name: media-hub-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6380:6379"
    networks:
      - media-hub-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 后端开发服务 (使用 cargo watch 热重载)
  backend-dev:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: media-hub-backend-dev
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres-dev:5432/media_hub_dev
      REDIS_URL: redis://redis-dev:6379
      JWT_SECRET: dev-secret-key
      RUST_LOG: debug
      RUST_BACKTRACE: 1
    volumes:
      - ./backend:/app/backend:cached
      - backend_dev_target:/app/backend/target
      - backend_dev_logs:/app/logs
    ports:
      - "8001:8000"
    networks:
      - media-hub-dev-network
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    command: ["cargo", "watch", "-x", "run"]

  # 前端开发服务 (Vite 热重载)
  frontend-dev:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: media-hub-frontend-dev
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: http://localhost:8001
      VITE_NODE_ENV: development
    volumes:
      - ./frontend:/app:cached
      - frontend_dev_node_modules:/app/node_modules
    ports:
      - "5174:5173"
    networks:
      - media-hub-dev-network
    depends_on:
      - backend-dev
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # 数据库管理工具 (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: media-hub-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@media-hub.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - media-hub-dev-network
    depends_on:
      - postgres-dev

  # Redis 管理工具 (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: media-hub-redis-insight
    restart: unless-stopped
    volumes:
      - redis_insight_data:/db
    ports:
      - "8002:8001"
    networks:
      - media-hub-dev-network
    depends_on:
      - redis-dev

  # 邮件测试工具 (MailHog)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: media-hub-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - media-hub-dev-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_dev_target:
    driver: local
  backend_dev_logs:
    driver: local
  frontend_dev_node_modules:
    driver: local
  pgadmin_data:
    driver: local
  redis_insight_data:
    driver: local

networks:
  media-hub-dev-network:
    driver: bridge